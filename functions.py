import xgboost as xgb
import xarray as xr
import numpy as np
import pandas as pd

ds = xr.open_dataset('weather_forecasts/latest_weather_fc.nc')


def interp_inputs(lat, lon):
    '''
    The interp_inputs() function takes latitude and longitude coordinates as input and performs interpolation
    on prediction variables to be passed into a prediction model. It calculates wind speed, wind direction, 
    and other relevant features.

    Parameters:

    lat (float): The desired latitude coordinate for interpolation.
    lon (float): The desired longitude coordinate for interpolation.

    Returns:

    df (DataFrame): A Pandas dataframe containing the interpolated values and calculated features.
    '''
    desired_latitude = lat
    desired_longitude = lon

    # interpolate prediction variables
    interp_u = ds['u10'].interp(
        latitude=desired_latitude, longitude=desired_longitude)
    interp_v = ds['v10'].interp(
        latitude=desired_latitude, longitude=desired_longitude)
    ds['interp_msl'] = ds['msl'].interp(
        latitude=desired_latitude, longitude=desired_longitude)
    ds['interp_sp'] = ds['sp'].interp(
        latitude=desired_latitude, longitude=desired_longitude)
    ds['interp_t2m'] = ds['t2m'].interp(
        latitude=desired_latitude, longitude=desired_longitude)

    # Calculate Wind Speed and Direction
    wind_speed = np.sqrt(interp_u**2 + interp_v**2)

    wind_direction = np.arctan2(interp_v, interp_u) * (180 / np.pi)
    # Adjust wind direction to range from 0 to 360 degrees
    wind_direction = (wind_direction + 360) % 360

    ds['wind_speed'] = wind_speed
    ds['wind_direction'] = wind_direction

    FEATURES = ['interp_sp', 'interp_msl',
                'wind_speed', 'wind_direction', 'interp_t2m']

    # Create a Pandas dataframe from the xarray dataset
    df = ds[FEATURES].to_dataframe()
    df = df.reset_index()
    df = df.set_index('valid_time')
    df = df.drop(columns=['time', 'step', 'meanSea',
                 'surface', 'heightAboveGround'])
    df = df.rename_axis(index={'valid_time': 'time', })
    df = df.rename(columns={'interp_sp': 'sp',
                            'interp_msl': 'msl',
                            'interp_t2m': 't2m',
                            })

    return df


def get_windfc(df):
    '''
    The get_windfc() function takes a Pandas DataFrame of prediction variables generated by interp_inputs() as input and
    performs wind power forecasting using an XGBoost model. It applies post-processing steps to ensure the predicted
    values fall within the range of 0 to 1. The function then returns the modified DataFrame with the most recent wind 
    power forecast in the last column.

    Parameters:

    df (DataFrame): The input DataFrame containing the necessary features for wind power forecasting.
    
    Returns:

    most_recent_forecast (DataFrame): The modified DataFrame with the most recent wind power forecast.
    '''
    # Load XGBoost Model
    model = xgb.XGBRegressor()
    model.load_model('models/windModelV3.json')

    # Make predictions
    df['windpower_fc'] = model.predict(df)

    # Predictions between 0 and 1 only
    df['windpower_fc'] = df['windpower_fc'].apply(lambda x: 1 if x > 1 else x)
    df['windpower_fc'] = df['windpower_fc'].apply(lambda x: 0 if x < 0 else x)

    most_recent_forecast = df.drop(
        columns=['sp', 'msl', 'wind_speed', 'wind_direction', 't2m'])

    return most_recent_forecast


def is_outside_uk(latitude, longitude):
    '''
    The is_outside_uk() function takes latitude and longitude coordinates as input and determines whether the given 
    coordinates are within the UK.If the latitude or longitude falls outside the defined UK boundaries, the function
    returns True. Otherwise, it returns False.

    Parameters:

    latitude (float): The latitude coordinate to check.
    longitude (float): The longitude coordinate to check.
    
    Returns:

    True if the given latitude and longitude coordinates are outside the UK boundary.
    False if the given latitude and longitude coordinates fall within the UK boundary.
    '''
    # Define the boundaries of the UK
    uk_latitude_min = 50.0
    uk_latitude_max = 60.0
    uk_longitude_min = -10.0
    uk_longitude_max = 2.0

    # Check if the given latitude and longitude are outside the UK boundary
    if latitude < uk_latitude_min or latitude > uk_latitude_max or longitude < uk_longitude_min or longitude > uk_longitude_max:
        return True
    else:
        return False


def get_daily_windfc(df):
    '''
    The get_daily_windfc() function takes a Pandas DataFrame as input, which includes a column named 'windpower_fc' representing 
    wind power forecast values, indexed by valid time. The function performs data resampling to obtain daily averages of the 
    'windpower_fc' values. It then assigns power ratings based on the calculated average values.

    Parameters:

    df (DataFrame): The input DataFrame containing wind power forecast values.
    
    Returns:

    daily_average_df (DataFrame): A new DataFrame containing the daily average wind power forecast values and their corresponding power ratings.
    '''
    # Resample the data to daily frequency and calculate the mean
    daily_average = df['windpower_fc'].resample('D').mean()

    # Convert the daily_average Series to a DataFrame
    daily_average_df = daily_average.to_frame(name='average')

    # Assign power ratings based on average values
    daily_average_df['power_rating'] = pd.cut(daily_average_df['average'], bins=[
                                              0, 0.2, 0.4, 0.6, 0.8, 1.0], labels=[1, 2, 3, 4, 5])

    # Convert the index to a string representation of the dates
    daily_average_df.index = daily_average_df.index.strftime('%Y-%m-%d')

    return daily_average_df
